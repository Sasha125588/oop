#include "DireUnitsFactory.hpp"
#include "RadiantUnitsFactory.hpp"
#include "Unit.hpp"
#include "UnitsFactory.hpp"
#include <cstdlib>
#include <ctime>
#include <iostream>
#include <string>
#include <vector>
#include <termios.h>
#include <unistd.h>

using namespace std;

void waitForSpace();
Unit* createRandomUnit(UnitsFactory&, int number);
bool isTeamDefeated(Unit* team[], int size);
int countAlive(Unit* team[], int size);
void showTeamStatus(const string& teamName, Unit* team[], int size);
Unit* getRandomAliveUnit(Unit* team[], int size);

void separator(const string& text = "") {
    cout << "\n" << string(70, '=') << endl;
    if (!text.empty()) {
        cout << "  " << text << endl;
        cout << string(70, '=') << endl;
    }
}

int main() {
    srand(time(NULL));
    
    cout << "\n";
    cout << "‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà" << endl;
    cout << "‚ñà                                                                  ‚ñà" << endl;
    cout << "‚ñà                    ‚öîÔ∏è  –ë–ò–¢–í–ê –ì–ï–†–û–á–í ‚öîÔ∏è                          ‚ñà" << endl;
    cout << "‚ñà                                                                  ‚ñà" << endl;
    cout << "‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà" << endl;
    
    RadiantUnitsFactory radiantFactory;
    DireUnitsFactory direFactory;

    const int TEAM_SIZE = 3;
    Unit* radiantTeam[TEAM_SIZE]; // —Å–∏–ª–∏ —Å–≤—ñ—Ç–ª–∞
    Unit* direTeam[TEAM_SIZE]; // —Å–∏–ª–∏ —Ç—å–º–∏
    
    separator("–§–û–†–ú–£–í–ê–ù–ù–Ø –ö–û–ú–ê–ù–î");
    
    cout << "\nüîµ –°–ò–õ–ò –°–í–Ü–¢–õ–ê (Radiant):" << endl;
    for (int i = 0; i < TEAM_SIZE; i++) {
        cout << "   –ë–æ—î—Ü—å " << (i + 1) << ": ";
        radiantTeam[i] = createRandomUnit(radiantFactory, i + 1);
    }
    
    cout << "\nüî¥ –°–ò–õ–ò –¢–¨–ú–ò (Dire):" << endl;
    for (int i = 0; i < TEAM_SIZE; i++) {
        cout << "   –ë–æ—î—Ü—å " << (i + 1) << ": ";
        direTeam[i] = createRandomUnit(direFactory, i + 1);
    }
    
    separator();
    cout << "\n–ö–æ–º–∞–Ω–¥–∏ —Å—Ñ–æ—Ä–º–æ–≤–∞–Ω—ñ! –ë–∏—Ç–≤–∞ –ø–æ—á–∏–Ω–∞—î—Ç—å—Å—è!\n" << endl;
    
    waitForSpace();
    
    separator("‚öîÔ∏è  –ü–û–ß–ê–¢–û–ö –ë–ò–¢–í–ò ‚öîÔ∏è");
    
    showTeamStatus("üîµ –°–ò–õ–ò –°–í–Ü–¢–õ–ê", radiantTeam, TEAM_SIZE);
    showTeamStatus("üî¥ –°–ò–õ–ò –¢–¨–ú–ò", direTeam, TEAM_SIZE);
    
    waitForSpace();
    
    int round = 1;
    bool radiantTurn = true;
    
    while (!isTeamDefeated(radiantTeam, TEAM_SIZE) && !isTeamDefeated(direTeam, TEAM_SIZE)) {
        separator("–†–ê–£–ù–î " + to_string(round));
        
        cout << "üîµ –ñ–∏–≤–∏—Ö –±—ñ–π—Ü—ñ–≤ (Radiant): " << countAlive(radiantTeam, TEAM_SIZE) << "/" << TEAM_SIZE << endl;
        cout << "üî¥ –ñ–∏–≤–∏—Ö –±—ñ–π—Ü—ñ–≤ (Dire): " << countAlive(direTeam, TEAM_SIZE) << "/" << TEAM_SIZE << endl;
        
        Unit* attacker;
        Unit* defender;
        string attackerTeam, defenderTeam;
        
        if (radiantTurn) {
            attacker = getRandomAliveUnit(radiantTeam, TEAM_SIZE);
            defender = getRandomAliveUnit(direTeam, TEAM_SIZE);
            attackerTeam = "üîµ –°–í–Ü–¢–õ–ê";
            defenderTeam = "üî¥ –¢–¨–ú–ò";
        } else {
            attacker = getRandomAliveUnit(direTeam, TEAM_SIZE);
            defender = getRandomAliveUnit(radiantTeam, TEAM_SIZE);
            attackerTeam = "üî¥ –°–í–Ü–¢–õ–ê";
            defenderTeam = "üîµ –¢–¨–ú–ò";
        }
        
        if (!attacker || !defender) {
            break;
        }
        
        cout << "\n" << "—Å–∏–ª–∏ " << attackerTeam << " –∞—Ç–∞–∫—É—é—Ç—å!" << endl;
        
        attacker->attack(*defender);
        
        radiantTurn = !radiantTurn;
        round++;
        
        waitForSpace();
    }
    
    separator("‚≠ê –†–ï–ó–£–õ–¨–¢–ê–¢–ò –ë–ò–¢–í–ò ‚≠ê");
    
    bool radiantWon = !isTeamDefeated(radiantTeam, TEAM_SIZE);
    bool direWon = !isTeamDefeated(direTeam, TEAM_SIZE);
    
    cout << "\n";
    if (radiantWon) {
        cout << "üéâüéâüéâ –ü–ï–†–ï–ú–û–ì–ê üîµ –°–ò–õ –°–í–Ü–¢–õ–ê (Radiant)! üéâüéâüéâ" << endl;
        cout << "\nüèÜ –ñ–∏–≤–∏—Ö –≥–µ—Ä–æ—ó–≤: " << countAlive(radiantTeam, TEAM_SIZE) << "/" << TEAM_SIZE << endl;
    } else if (direWon) {
        cout << "üéâüéâüéâ –ü–ï–†–ï–ú–û–ì–ê üî¥ –°–ò–õ –¢–¨–ú–ò (Dire)! üéâüéâüéâ" << endl;
        cout << "\nüèÜ –ñ–∏–≤–∏—Ö –≥–µ—Ä–æ—ó–≤: " << countAlive(direTeam, TEAM_SIZE) << "/" << TEAM_SIZE << endl;
    } else {
        cout << "‚öñÔ∏è  –ù–Ü–ß–ò–Ø! –û–±–∏–¥–≤—ñ –∫–æ–º–∞–Ω–¥–∏ –∑–Ω–∏—â–µ–Ω—ñ!" << endl;
    }
    
    cout << "\n–í—Å—å–æ–≥–æ —Ä–∞—É–Ω–¥—ñ–≤: " << (round - 1) << endl;
    
    separator("–§–Ü–ù–ê–õ–¨–ù–ò–ô –°–¢–ê–ù –ö–û–ú–ê–ù–î");
    showTeamStatus("üîµ –°–ò–õ–ò –°–í–Ü–¢–õ–ê (Radiant)", radiantTeam, TEAM_SIZE);
    showTeamStatus("üî¥ –°–ò–õ–ò –¢–¨–ú–ò (Dire)", direTeam, TEAM_SIZE);
    
    separator();
    cout << "\n–ë–∏—Ç–≤–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!\n" << endl;
    
    for (int i = 0; i < TEAM_SIZE; i++) {
        delete radiantTeam[i];
        delete direTeam[i];
    }
    
    return 0;
}

void waitForSpace() {
    cout << "\n[–ù–∞—Ç–∏—Å–Ω—ñ—Ç—å –ü–†–û–ë–Ü–õ –¥–ª—è –ø—Ä–æ–¥–æ–≤–∂–µ–Ω–Ω—è...]";
    getchar();
    cout << "\n" << endl;
}

Unit* createRandomUnit(UnitsFactory& currentFactory, int number) {
    int type = rand() % 3;
    
    switch (type) {
        case 0:
            cout << "üèπ ";
            return currentFactory.CreateArcher(number);
        case 1:
            cout << "üó°Ô∏è  ";
            return currentFactory.CreateSwordsman(number);
        case 2:
            cout << "üîÆ ";
            return currentFactory.CreateMage(number);
        default:
        return currentFactory.CreateArcher(number);
    }
}

bool isTeamDefeated(Unit* team[], int size) {
    for (int i = 0; i < size; i++) {
        if (team[i]->getIsAlive()) {
            return false;
        }
    }
    return true;
}

int countAlive(Unit* team[], int size) {
    int count = 0;
    for (int i = 0; i < size; i++) {
        if (team[i]->getIsAlive()) count++;
    }
    return count;
}

void showTeamStatus(const string& teamName, Unit* team[], int size) {
    cout << "\nüìã " << teamName << ":" << endl;
    for (int i = 0; i < size; i++) {
        cout << "   ";
        team[i]->showStatus();
    }
}

Unit* getRandomAliveUnit(Unit* team[], int size) {
    vector<int> aliveIndices;
    for (int i = 0; i < size; i++) {
        if (team[i]->getIsAlive()) {
            aliveIndices.push_back(i);
        }
    }
    
    if (aliveIndices.empty()) return nullptr;
    
    int randomIndex = aliveIndices[rand() % aliveIndices.size()];
    return team[randomIndex];
}